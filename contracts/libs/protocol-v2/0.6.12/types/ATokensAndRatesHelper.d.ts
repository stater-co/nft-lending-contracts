/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ATokensAndRatesHelperInterface extends ethers.utils.Interface {
  functions: {
    "configureReserves(tuple[])": FunctionFragment;
    "initDeployment(tuple[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "configureReserves",
    values: [
      {
        asset: string;
        baseLTV: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        reserveFactor: BigNumberish;
        stableBorrowingEnabled: boolean;
        borrowingEnabled: boolean;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initDeployment",
    values: [
      {
        asset: string;
        rates: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "configureReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initDeployment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "deployedContracts(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "deployedContracts"): EventFragment;
}

export class ATokensAndRatesHelper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ATokensAndRatesHelperInterface;

  functions: {
    configureReserves(
      inputParams: {
        asset: string;
        baseLTV: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        reserveFactor: BigNumberish;
        stableBorrowingEnabled: boolean;
        borrowingEnabled: boolean;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "configureReserves(tuple[])"(
      inputParams: {
        asset: string;
        baseLTV: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        reserveFactor: BigNumberish;
        stableBorrowingEnabled: boolean;
        borrowingEnabled: boolean;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initDeployment(
      inputParams: {
        asset: string;
        rates: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initDeployment(tuple[])"(
      inputParams: {
        asset: string;
        rates: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  configureReserves(
    inputParams: {
      asset: string;
      baseLTV: BigNumberish;
      liquidationThreshold: BigNumberish;
      liquidationBonus: BigNumberish;
      reserveFactor: BigNumberish;
      stableBorrowingEnabled: boolean;
      borrowingEnabled: boolean;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "configureReserves(tuple[])"(
    inputParams: {
      asset: string;
      baseLTV: BigNumberish;
      liquidationThreshold: BigNumberish;
      liquidationBonus: BigNumberish;
      reserveFactor: BigNumberish;
      stableBorrowingEnabled: boolean;
      borrowingEnabled: boolean;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initDeployment(
    inputParams: {
      asset: string;
      rates: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initDeployment(tuple[])"(
    inputParams: {
      asset: string;
      rates: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    configureReserves(
      inputParams: {
        asset: string;
        baseLTV: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        reserveFactor: BigNumberish;
        stableBorrowingEnabled: boolean;
        borrowingEnabled: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "configureReserves(tuple[])"(
      inputParams: {
        asset: string;
        baseLTV: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        reserveFactor: BigNumberish;
        stableBorrowingEnabled: boolean;
        borrowingEnabled: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    initDeployment(
      inputParams: {
        asset: string;
        rates: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "initDeployment(tuple[])"(
      inputParams: {
        asset: string;
        rates: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    deployedContracts(aToken: null, strategy: null): EventFilter;
  };

  estimateGas: {
    configureReserves(
      inputParams: {
        asset: string;
        baseLTV: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        reserveFactor: BigNumberish;
        stableBorrowingEnabled: boolean;
        borrowingEnabled: boolean;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "configureReserves(tuple[])"(
      inputParams: {
        asset: string;
        baseLTV: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        reserveFactor: BigNumberish;
        stableBorrowingEnabled: boolean;
        borrowingEnabled: boolean;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    initDeployment(
      inputParams: {
        asset: string;
        rates: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initDeployment(tuple[])"(
      inputParams: {
        asset: string;
        rates: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    configureReserves(
      inputParams: {
        asset: string;
        baseLTV: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        reserveFactor: BigNumberish;
        stableBorrowingEnabled: boolean;
        borrowingEnabled: boolean;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "configureReserves(tuple[])"(
      inputParams: {
        asset: string;
        baseLTV: BigNumberish;
        liquidationThreshold: BigNumberish;
        liquidationBonus: BigNumberish;
        reserveFactor: BigNumberish;
        stableBorrowingEnabled: boolean;
        borrowingEnabled: boolean;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initDeployment(
      inputParams: {
        asset: string;
        rates: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initDeployment(tuple[])"(
      inputParams: {
        asset: string;
        rates: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
