/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockParaSwapAugustusRegistry } from "./MockParaSwapAugustusRegistry";

export class MockParaSwapAugustusRegistryFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    augustus: string,
    overrides?: Overrides
  ): Promise<MockParaSwapAugustusRegistry> {
    return super.deploy(
      augustus,
      overrides || {}
    ) as Promise<MockParaSwapAugustusRegistry>;
  }
  getDeployTransaction(
    augustus: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(augustus, overrides || {});
  }
  attach(address: string): MockParaSwapAugustusRegistry {
    return super.attach(address) as MockParaSwapAugustusRegistry;
  }
  connect(signer: Signer): MockParaSwapAugustusRegistryFactory {
    return super.connect(signer) as MockParaSwapAugustusRegistryFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockParaSwapAugustusRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockParaSwapAugustusRegistry;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "augustus",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "augustus",
        type: "address",
      },
    ],
    name: "isValidAugustus",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161017b38038061017b83398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c60ef61008c600039806052525060ef6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063fb04e17b14602d575b600080fd5b603c60383660046082565b6050565b6040516047919060ae565b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6000602082840312156092578081fd5b81356001600160a01b038116811460a7578182fd5b9392505050565b90151581526020019056fea2646970667358221220f8912de3b74b6bb8aa154f835ce71bb63e20059996f63ad8d00a95c0e5e8a5b764736f6c634300060c0033";
