/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IRelayHubInterface extends utils.Interface {
  contractName: "IRelayHub";
  functions: {
    "balanceOf(address)": FunctionFragment;
    "canRelay(address,address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)": FunctionFragment;
    "depositFor(address)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getRelay(address)": FunctionFragment;
    "maxPossibleCharge(uint256,uint256,uint256)": FunctionFragment;
    "penalizeIllegalTransaction(bytes,bytes)": FunctionFragment;
    "penalizeRepeatedNonce(bytes,bytes,bytes,bytes)": FunctionFragment;
    "registerRelay(uint256,string)": FunctionFragment;
    "relayCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,bytes)": FunctionFragment;
    "removeRelayByOwner(address)": FunctionFragment;
    "requiredGas(uint256)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "unstake(address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "canRelay",
    values: [
      string,
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "depositFor", values: [string]): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(functionFragment: "getRelay", values: [string]): string;
  encodeFunctionData(
    functionFragment: "maxPossibleCharge",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "penalizeIllegalTransaction",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "penalizeRepeatedNonce",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRelay",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "relayCall",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRelayByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredGas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unstake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canRelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxPossibleCharge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "penalizeIllegalTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "penalizeRepeatedNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRelayByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CanRelayFailed(address,address,address,bytes4,uint256)": EventFragment;
    "Deposited(address,address,uint256)": EventFragment;
    "Penalized(address,address,uint256)": EventFragment;
    "RelayAdded(address,address,uint256,uint256,uint256,string)": EventFragment;
    "RelayRemoved(address,uint256)": EventFragment;
    "Staked(address,uint256,uint256)": EventFragment;
    "TransactionRelayed(address,address,address,bytes4,uint8,uint256)": EventFragment;
    "Unstaked(address,uint256)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CanRelayFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Penalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionRelayed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type CanRelayFailedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  {
    relay: string;
    from: string;
    to: string;
    selector: string;
    reason: BigNumber;
  }
>;

export type CanRelayFailedEventFilter = TypedEventFilter<CanRelayFailedEvent>;

export type DepositedEvent = TypedEvent<
  [string, string, BigNumber],
  { recipient: string; from: string; amount: BigNumber }
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export type PenalizedEvent = TypedEvent<
  [string, string, BigNumber],
  { relay: string; sender: string; amount: BigNumber }
>;

export type PenalizedEventFilter = TypedEventFilter<PenalizedEvent>;

export type RelayAddedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  {
    relay: string;
    owner: string;
    transactionFee: BigNumber;
    stake: BigNumber;
    unstakeDelay: BigNumber;
    url: string;
  }
>;

export type RelayAddedEventFilter = TypedEventFilter<RelayAddedEvent>;

export type RelayRemovedEvent = TypedEvent<
  [string, BigNumber],
  { relay: string; unstakeTime: BigNumber }
>;

export type RelayRemovedEventFilter = TypedEventFilter<RelayRemovedEvent>;

export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { relay: string; stake: BigNumber; unstakeDelay: BigNumber }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type TransactionRelayedEvent = TypedEvent<
  [string, string, string, string, number, BigNumber],
  {
    relay: string;
    from: string;
    to: string;
    selector: string;
    status: number;
    charge: BigNumber;
  }
>;

export type TransactionRelayedEventFilter =
  TypedEventFilter<TransactionRelayedEvent>;

export type UnstakedEvent = TypedEvent<
  [string, BigNumber],
  { relay: string; stake: BigNumber }
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; dest: string; amount: BigNumber }
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface IRelayHub extends BaseContract {
  contractName: "IRelayHub";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRelayHubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(target: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    canRelay(
      relay: string,
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { status: BigNumber; recipientContext: string }
    >;

    depositFor(
      target: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNonce(from: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRelay(
      relay: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, number] & {
        totalStake: BigNumber;
        unstakeDelay: BigNumber;
        unstakeTime: BigNumber;
        owner: string;
        state: number;
      }
    >;

    maxPossibleCharge(
      relayedCallStipend: BigNumberish,
      gasPrice: BigNumberish,
      transactionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    penalizeIllegalTransaction(
      unsignedTx: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    penalizeRepeatedNonce(
      unsignedTx1: BytesLike,
      signature1: BytesLike,
      unsignedTx2: BytesLike,
      signature2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerRelay(
      transactionFee: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relayCall(
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRelayByOwner(
      relay: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requiredGas(
      relayedCallStipend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      relayaddr: string,
      unstakeDelay: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      relay: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(target: string, overrides?: CallOverrides): Promise<BigNumber>;

  canRelay(
    relay: string,
    from: string,
    to: string,
    encodedFunction: BytesLike,
    transactionFee: BigNumberish,
    gasPrice: BigNumberish,
    gasLimit: BigNumberish,
    nonce: BigNumberish,
    signature: BytesLike,
    approvalData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { status: BigNumber; recipientContext: string }
  >;

  depositFor(
    target: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRelay(
    relay: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, number] & {
      totalStake: BigNumber;
      unstakeDelay: BigNumber;
      unstakeTime: BigNumber;
      owner: string;
      state: number;
    }
  >;

  maxPossibleCharge(
    relayedCallStipend: BigNumberish,
    gasPrice: BigNumberish,
    transactionFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  penalizeIllegalTransaction(
    unsignedTx: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  penalizeRepeatedNonce(
    unsignedTx1: BytesLike,
    signature1: BytesLike,
    unsignedTx2: BytesLike,
    signature2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerRelay(
    transactionFee: BigNumberish,
    url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relayCall(
    from: string,
    to: string,
    encodedFunction: BytesLike,
    transactionFee: BigNumberish,
    gasPrice: BigNumberish,
    gasLimit: BigNumberish,
    nonce: BigNumberish,
    signature: BytesLike,
    approvalData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRelayByOwner(
    relay: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requiredGas(
    relayedCallStipend: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stake(
    relayaddr: string,
    unstakeDelay: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    relay: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    dest: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(target: string, overrides?: CallOverrides): Promise<BigNumber>;

    canRelay(
      relay: string,
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { status: BigNumber; recipientContext: string }
    >;

    depositFor(target: string, overrides?: CallOverrides): Promise<void>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRelay(
      relay: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, number] & {
        totalStake: BigNumber;
        unstakeDelay: BigNumber;
        unstakeTime: BigNumber;
        owner: string;
        state: number;
      }
    >;

    maxPossibleCharge(
      relayedCallStipend: BigNumberish,
      gasPrice: BigNumberish,
      transactionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    penalizeIllegalTransaction(
      unsignedTx: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    penalizeRepeatedNonce(
      unsignedTx1: BytesLike,
      signature1: BytesLike,
      unsignedTx2: BytesLike,
      signature2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registerRelay(
      transactionFee: BigNumberish,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>;

    relayCall(
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRelayByOwner(relay: string, overrides?: CallOverrides): Promise<void>;

    requiredGas(
      relayedCallStipend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      relayaddr: string,
      unstakeDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(relay: string, overrides?: CallOverrides): Promise<void>;

    withdraw(
      amount: BigNumberish,
      dest: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CanRelayFailed(address,address,address,bytes4,uint256)"(
      relay?: string | null,
      from?: string | null,
      to?: string | null,
      selector?: null,
      reason?: null
    ): CanRelayFailedEventFilter;
    CanRelayFailed(
      relay?: string | null,
      from?: string | null,
      to?: string | null,
      selector?: null,
      reason?: null
    ): CanRelayFailedEventFilter;

    "Deposited(address,address,uint256)"(
      recipient?: string | null,
      from?: string | null,
      amount?: null
    ): DepositedEventFilter;
    Deposited(
      recipient?: string | null,
      from?: string | null,
      amount?: null
    ): DepositedEventFilter;

    "Penalized(address,address,uint256)"(
      relay?: string | null,
      sender?: null,
      amount?: null
    ): PenalizedEventFilter;
    Penalized(
      relay?: string | null,
      sender?: null,
      amount?: null
    ): PenalizedEventFilter;

    "RelayAdded(address,address,uint256,uint256,uint256,string)"(
      relay?: string | null,
      owner?: string | null,
      transactionFee?: null,
      stake?: null,
      unstakeDelay?: null,
      url?: null
    ): RelayAddedEventFilter;
    RelayAdded(
      relay?: string | null,
      owner?: string | null,
      transactionFee?: null,
      stake?: null,
      unstakeDelay?: null,
      url?: null
    ): RelayAddedEventFilter;

    "RelayRemoved(address,uint256)"(
      relay?: string | null,
      unstakeTime?: null
    ): RelayRemovedEventFilter;
    RelayRemoved(
      relay?: string | null,
      unstakeTime?: null
    ): RelayRemovedEventFilter;

    "Staked(address,uint256,uint256)"(
      relay?: string | null,
      stake?: null,
      unstakeDelay?: null
    ): StakedEventFilter;
    Staked(
      relay?: string | null,
      stake?: null,
      unstakeDelay?: null
    ): StakedEventFilter;

    "TransactionRelayed(address,address,address,bytes4,uint8,uint256)"(
      relay?: string | null,
      from?: string | null,
      to?: string | null,
      selector?: null,
      status?: null,
      charge?: null
    ): TransactionRelayedEventFilter;
    TransactionRelayed(
      relay?: string | null,
      from?: string | null,
      to?: string | null,
      selector?: null,
      status?: null,
      charge?: null
    ): TransactionRelayedEventFilter;

    "Unstaked(address,uint256)"(
      relay?: string | null,
      stake?: null
    ): UnstakedEventFilter;
    Unstaked(relay?: string | null, stake?: null): UnstakedEventFilter;

    "Withdrawn(address,address,uint256)"(
      account?: string | null,
      dest?: string | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      account?: string | null,
      dest?: string | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    balanceOf(target: string, overrides?: CallOverrides): Promise<BigNumber>;

    canRelay(
      relay: string,
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFor(
      target: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNonce(from: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRelay(relay: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxPossibleCharge(
      relayedCallStipend: BigNumberish,
      gasPrice: BigNumberish,
      transactionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    penalizeIllegalTransaction(
      unsignedTx: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    penalizeRepeatedNonce(
      unsignedTx1: BytesLike,
      signature1: BytesLike,
      unsignedTx2: BytesLike,
      signature2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerRelay(
      transactionFee: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relayCall(
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRelayByOwner(
      relay: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requiredGas(
      relayedCallStipend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      relayaddr: string,
      unstakeDelay: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      relay: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canRelay(
      relay: string,
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFor(
      target: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNonce(
      from: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRelay(
      relay: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPossibleCharge(
      relayedCallStipend: BigNumberish,
      gasPrice: BigNumberish,
      transactionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    penalizeIllegalTransaction(
      unsignedTx: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    penalizeRepeatedNonce(
      unsignedTx1: BytesLike,
      signature1: BytesLike,
      unsignedTx2: BytesLike,
      signature2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerRelay(
      transactionFee: BigNumberish,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relayCall(
      from: string,
      to: string,
      encodedFunction: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      gasLimit: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike,
      approvalData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRelayByOwner(
      relay: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requiredGas(
      relayedCallStipend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      relayaddr: string,
      unstakeDelay: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      relay: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      dest: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
