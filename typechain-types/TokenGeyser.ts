/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TokenGeyserInterface extends utils.Interface {
  contractName: "TokenGeyser";
  functions: {
    "BONUS_DECIMALS()": FunctionFragment;
    "bonusPeriodSec()": FunctionFragment;
    "getDistributionToken()": FunctionFragment;
    "getStakingToken()": FunctionFragment;
    "lockTokens(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueFundsFromStakingPool(address,address,uint256)": FunctionFragment;
    "setDistributionToken(address)": FunctionFragment;
    "setStakingToken(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeFor(address,uint256)": FunctionFragment;
    "startBonus()": FunctionFragment;
    "supportsHistory()": FunctionFragment;
    "token()": FunctionFragment;
    "totalLocked()": FunctionFragment;
    "totalLockedShares()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "totalStakedFor(address)": FunctionFragment;
    "totalStakingShares()": FunctionFragment;
    "totalUnlocked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockScheduleCount()": FunctionFragment;
    "unlockSchedules(uint256)": FunctionFragment;
    "unlockTokens()": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "unstakeQuery(uint256)": FunctionFragment;
    "updateAccounting()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BONUS_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonusPeriodSec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueFundsFromStakingPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsHistory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakingShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnlocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockScheduleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockSchedules",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeQuery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccounting",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BONUS_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bonusPeriodSec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueFundsFromStakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakingShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockScheduleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccounting",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(address,uint256,uint256,bytes)": EventFragment;
    "TokensClaimed(address,uint256)": EventFragment;
    "TokensLocked(uint256,uint256,uint256)": EventFragment;
    "TokensUnlocked(uint256,uint256)": EventFragment;
    "Unstaked(address,uint256,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  { user: string; amount: BigNumber; total: BigNumber; data: string }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type TokensClaimedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export type TokensLockedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { amount: BigNumber; durationSec: BigNumber; total: BigNumber }
>;

export type TokensLockedEventFilter = TypedEventFilter<TokensLockedEvent>;

export type TokensUnlockedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { amount: BigNumber; total: BigNumber }
>;

export type TokensUnlockedEventFilter = TypedEventFilter<TokensUnlockedEvent>;

export type UnstakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  { user: string; amount: BigNumber; total: BigNumber; data: string }
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface TokenGeyser extends BaseContract {
  contractName: "TokenGeyser";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenGeyserInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BONUS_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    bonusPeriodSec(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDistributionToken(overrides?: CallOverrides): Promise<[string]>;

    getStakingToken(overrides?: CallOverrides): Promise<[string]>;

    lockTokens(
      amount: BigNumberish,
      durationSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueFundsFromStakingPool(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributionToken(
      stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingToken(
      stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startBonus(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsHistory(overrides?: CallOverrides): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLockedShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakedFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStakingShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUnlocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockScheduleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockSchedules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialLockedShares: BigNumber;
        unlockedShares: BigNumber;
        lastUnlockTimestampSec: BigNumber;
        endAtSec: BigNumber;
        durationSec: BigNumber;
      }
    >;

    unlockTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeQuery(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateAccounting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BONUS_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  bonusPeriodSec(overrides?: CallOverrides): Promise<BigNumber>;

  getDistributionToken(overrides?: CallOverrides): Promise<string>;

  getStakingToken(overrides?: CallOverrides): Promise<string>;

  lockTokens(
    amount: BigNumberish,
    durationSec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueFundsFromStakingPool(
    tokenToRescue: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributionToken(
    stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingToken(
    stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeFor(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startBonus(overrides?: CallOverrides): Promise<BigNumber>;

  supportsHistory(overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakedFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalStakingShares(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockScheduleCount(overrides?: CallOverrides): Promise<BigNumber>;

  unlockSchedules(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      initialLockedShares: BigNumber;
      unlockedShares: BigNumber;
      lastUnlockTimestampSec: BigNumber;
      endAtSec: BigNumber;
      durationSec: BigNumber;
    }
  >;

  unlockTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeQuery(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateAccounting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BONUS_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    bonusPeriodSec(overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionToken(overrides?: CallOverrides): Promise<string>;

    getStakingToken(overrides?: CallOverrides): Promise<string>;

    lockTokens(
      amount: BigNumberish,
      durationSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueFundsFromStakingPool(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDistributionToken(
      stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingToken(
      stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startBonus(overrides?: CallOverrides): Promise<BigNumber>;

    supportsHistory(overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalStakingShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockScheduleCount(overrides?: CallOverrides): Promise<BigNumber>;

    unlockSchedules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        initialLockedShares: BigNumber;
        unlockedShares: BigNumber;
        lastUnlockTimestampSec: BigNumber;
        endAtSec: BigNumber;
        durationSec: BigNumber;
      }
    >;

    unlockTokens(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    unstakeQuery(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAccounting(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Staked(address,uint256,uint256,bytes)"(
      user?: string | null,
      amount?: null,
      total?: null,
      data?: null
    ): StakedEventFilter;
    Staked(
      user?: string | null,
      amount?: null,
      total?: null,
      data?: null
    ): StakedEventFilter;

    "TokensClaimed(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TokensClaimedEventFilter;
    TokensClaimed(
      user?: string | null,
      amount?: null
    ): TokensClaimedEventFilter;

    "TokensLocked(uint256,uint256,uint256)"(
      amount?: null,
      durationSec?: null,
      total?: null
    ): TokensLockedEventFilter;
    TokensLocked(
      amount?: null,
      durationSec?: null,
      total?: null
    ): TokensLockedEventFilter;

    "TokensUnlocked(uint256,uint256)"(
      amount?: null,
      total?: null
    ): TokensUnlockedEventFilter;
    TokensUnlocked(amount?: null, total?: null): TokensUnlockedEventFilter;

    "Unstaked(address,uint256,uint256,bytes)"(
      user?: string | null,
      amount?: null,
      total?: null,
      data?: null
    ): UnstakedEventFilter;
    Unstaked(
      user?: string | null,
      amount?: null,
      total?: null,
      data?: null
    ): UnstakedEventFilter;
  };

  estimateGas: {
    BONUS_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    bonusPeriodSec(overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionToken(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    lockTokens(
      amount: BigNumberish,
      durationSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueFundsFromStakingPool(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributionToken(
      stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingToken(
      stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startBonus(overrides?: CallOverrides): Promise<BigNumber>;

    supportsHistory(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalStakingShares(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockScheduleCount(overrides?: CallOverrides): Promise<BigNumber>;

    unlockSchedules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeQuery(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateAccounting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BONUS_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bonusPeriodSec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDistributionToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockTokens(
      amount: BigNumberish,
      durationSec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueFundsFromStakingPool(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributionToken(
      stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingToken(
      stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startBonus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsHistory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakedFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakingShares(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUnlocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockScheduleCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockSchedules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeQuery(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateAccounting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
