/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LibEIP712, LibEIP712Interface } from "../LibEIP712";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "domain_hash_1155",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b506040516094380380609483398181016040526020811015602f57600080fd5b81019080805190602001909291905050508060008190555050603f8060556000396000f3fe6080604052600080fdfea264697066735822122027aea1db4714b57c1e8cb9ec53515d52ab0be3da0c25129cc42c986e21acafe664736f6c63430007060033";

type LibEIP712ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibEIP712ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibEIP712__factory extends ContractFactory {
  constructor(...args: LibEIP712ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "LibEIP712";
  }

  deploy(
    domain_hash_1155: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibEIP712> {
    return super.deploy(
      domain_hash_1155,
      overrides || {}
    ) as Promise<LibEIP712>;
  }
  getDeployTransaction(
    domain_hash_1155: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(domain_hash_1155, overrides || {});
  }
  attach(address: string): LibEIP712 {
    return super.attach(address) as LibEIP712;
  }
  connect(signer: Signer): LibEIP712__factory {
    return super.connect(signer) as LibEIP712__factory;
  }
  static readonly contractName: "LibEIP712";
  public readonly contractName: "LibEIP712";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibEIP712Interface {
    return new utils.Interface(_abi) as LibEIP712Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibEIP712 {
    return new Contract(address, _abi, signerOrProvider) as LibEIP712;
  }
}
