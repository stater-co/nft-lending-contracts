/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenGeyserInterface extends ethers.utils.Interface {
  functions: {
    "BONUS_DECIMALS()": FunctionFragment;
    "bonusPeriodSec()": FunctionFragment;
    "getDistributionToken()": FunctionFragment;
    "getStakingToken()": FunctionFragment;
    "lockTokens(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueFundsFromStakingPool(address,address,uint256)": FunctionFragment;
    "setDistributionToken(address)": FunctionFragment;
    "setStakingToken(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeFor(address,uint256)": FunctionFragment;
    "startBonus()": FunctionFragment;
    "supportsHistory()": FunctionFragment;
    "token()": FunctionFragment;
    "totalLocked()": FunctionFragment;
    "totalLockedShares()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "totalStakedFor(address)": FunctionFragment;
    "totalStakingShares()": FunctionFragment;
    "totalUnlocked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockScheduleCount()": FunctionFragment;
    "unlockSchedules(uint256)": FunctionFragment;
    "unlockTokens()": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "unstakeQuery(uint256)": FunctionFragment;
    "updateAccounting()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BONUS_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonusPeriodSec",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rescueFundsFromStakingPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsHistory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakingShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnlocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockScheduleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockSchedules",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeQuery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccounting",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BONUS_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bonusPeriodSec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueFundsFromStakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakingShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockScheduleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccounting",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(address,uint256,uint256,bytes)": EventFragment;
    "TokensClaimed(address,uint256)": EventFragment;
    "TokensLocked(uint256,uint256,uint256)": EventFragment;
    "TokensUnlocked(uint256,uint256)": EventFragment;
    "Unstaked(address,uint256,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export class TokenGeyser extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenGeyserInterface;

  functions: {
    BONUS_DECIMALS(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "BONUS_DECIMALS()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    bonusPeriodSec(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "bonusPeriodSec()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getDistributionToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getDistributionToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getStakingToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getStakingToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    lockTokens(
      amount: BigNumberish,
      durationSec: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lockTokens(uint256,uint256)"(
      amount: BigNumberish,
      durationSec: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rescueFundsFromStakingPool(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rescueFundsFromStakingPool(address,address,uint256)"(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDistributionToken(
      stakingToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDistributionToken(address)"(
      stakingToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStakingToken(
      stakingToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStakingToken(address)"(
      stakingToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeFor(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startBonus(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "startBonus()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    supportsHistory(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "supportsHistory()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalLocked(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalLocked()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalLockedShares(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalLockedShares()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalStaked(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalStaked()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalStakedFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalStakedFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalStakingShares(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalStakingShares()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalUnlocked(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalUnlocked()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockScheduleCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "unlockScheduleCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    unlockSchedules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      initialLockedShares: BigNumber;
      unlockedShares: BigNumber;
      lastUnlockTimestampSec: BigNumber;
      endAtSec: BigNumber;
      durationSec: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "unlockSchedules(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      initialLockedShares: BigNumber;
      unlockedShares: BigNumber;
      lastUnlockTimestampSec: BigNumber;
      endAtSec: BigNumber;
      durationSec: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    unlockTokens(overrides?: Overrides): Promise<ContractTransaction>;

    "unlockTokens()"(overrides?: Overrides): Promise<ContractTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unstakeQuery(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstakeQuery(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateAccounting(overrides?: Overrides): Promise<ContractTransaction>;

    "updateAccounting()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  BONUS_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  "BONUS_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

  bonusPeriodSec(overrides?: CallOverrides): Promise<BigNumber>;

  "bonusPeriodSec()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDistributionToken(overrides?: CallOverrides): Promise<string>;

  "getDistributionToken()"(overrides?: CallOverrides): Promise<string>;

  getStakingToken(overrides?: CallOverrides): Promise<string>;

  "getStakingToken()"(overrides?: CallOverrides): Promise<string>;

  lockTokens(
    amount: BigNumberish,
    durationSec: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lockTokens(uint256,uint256)"(
    amount: BigNumberish,
    durationSec: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rescueFundsFromStakingPool(
    tokenToRescue: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rescueFundsFromStakingPool(address,address,uint256)"(
    tokenToRescue: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDistributionToken(
    stakingToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDistributionToken(address)"(
    stakingToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStakingToken(
    stakingToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStakingToken(address)"(
    stakingToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeFor(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeFor(address,uint256)"(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startBonus(overrides?: CallOverrides): Promise<BigNumber>;

  "startBonus()"(overrides?: CallOverrides): Promise<BigNumber>;

  supportsHistory(overrides?: CallOverrides): Promise<boolean>;

  "supportsHistory()"(overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

  "totalLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalLockedShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakedFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "totalStakedFor(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalStakingShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStakingShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

  "totalUnlocked()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockScheduleCount(overrides?: CallOverrides): Promise<BigNumber>;

  "unlockScheduleCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  unlockSchedules(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    initialLockedShares: BigNumber;
    unlockedShares: BigNumber;
    lastUnlockTimestampSec: BigNumber;
    endAtSec: BigNumber;
    durationSec: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "unlockSchedules(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    initialLockedShares: BigNumber;
    unlockedShares: BigNumber;
    lastUnlockTimestampSec: BigNumber;
    endAtSec: BigNumber;
    durationSec: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  unlockTokens(overrides?: Overrides): Promise<ContractTransaction>;

  "unlockTokens()"(overrides?: Overrides): Promise<ContractTransaction>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unstakeQuery(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstakeQuery(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateAccounting(overrides?: Overrides): Promise<ContractTransaction>;

  "updateAccounting()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    BONUS_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "BONUS_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    bonusPeriodSec(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusPeriodSec()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionToken(overrides?: CallOverrides): Promise<string>;

    "getDistributionToken()"(overrides?: CallOverrides): Promise<string>;

    getStakingToken(overrides?: CallOverrides): Promise<string>;

    "getStakingToken()"(overrides?: CallOverrides): Promise<string>;

    lockTokens(
      amount: BigNumberish,
      durationSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockTokens(uint256,uint256)"(
      amount: BigNumberish,
      durationSec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rescueFundsFromStakingPool(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "rescueFundsFromStakingPool(address,address,uint256)"(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDistributionToken(
      stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDistributionToken(address)"(
      stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingToken(
      stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStakingToken(address)"(
      stakingToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeFor(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startBonus(overrides?: CallOverrides): Promise<BigNumber>;

    "startBonus()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsHistory(overrides?: CallOverrides): Promise<boolean>;

    "supportsHistory()"(overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLockedShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStakingShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakingShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalUnlocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockScheduleCount(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockScheduleCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockSchedules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      initialLockedShares: BigNumber;
      unlockedShares: BigNumber;
      lastUnlockTimestampSec: BigNumber;
      endAtSec: BigNumber;
      durationSec: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "unlockSchedules(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      initialLockedShares: BigNumber;
      unlockedShares: BigNumber;
      lastUnlockTimestampSec: BigNumber;
      endAtSec: BigNumber;
      durationSec: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    unlockTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unstake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeQuery(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unstakeQuery(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAccounting(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "updateAccounting()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Staked(
      user: string | null,
      amount: null,
      total: null,
      data: null
    ): EventFilter;

    TokensClaimed(user: string | null, amount: null): EventFilter;

    TokensLocked(amount: null, durationSec: null, total: null): EventFilter;

    TokensUnlocked(amount: null, total: null): EventFilter;

    Unstaked(
      user: string | null,
      amount: null,
      total: null,
      data: null
    ): EventFilter;
  };

  estimateGas: {
    BONUS_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "BONUS_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    bonusPeriodSec(overrides?: CallOverrides): Promise<BigNumber>;

    "bonusPeriodSec()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDistributionToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getDistributionToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getStakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockTokens(
      amount: BigNumberish,
      durationSec: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "lockTokens(uint256,uint256)"(
      amount: BigNumberish,
      durationSec: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rescueFundsFromStakingPool(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rescueFundsFromStakingPool(address,address,uint256)"(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDistributionToken(
      stakingToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDistributionToken(address)"(
      stakingToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStakingToken(
      stakingToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setStakingToken(address)"(
      stakingToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeFor(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startBonus(overrides?: CallOverrides): Promise<BigNumber>;

    "startBonus()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsHistory(overrides?: CallOverrides): Promise<BigNumber>;

    "supportsHistory()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLockedShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStakingShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakingShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalUnlocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockScheduleCount(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockScheduleCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockSchedules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unlockSchedules(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockTokens(overrides?: Overrides): Promise<BigNumber>;

    "unlockTokens()"(overrides?: Overrides): Promise<BigNumber>;

    unstake(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "unstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unstakeQuery(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unstakeQuery(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateAccounting(overrides?: Overrides): Promise<BigNumber>;

    "updateAccounting()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BONUS_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BONUS_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonusPeriodSec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bonusPeriodSec()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDistributionToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStakingToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockTokens(
      amount: BigNumberish,
      durationSec: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lockTokens(uint256,uint256)"(
      amount: BigNumberish,
      durationSec: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rescueFundsFromStakingPool(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rescueFundsFromStakingPool(address,address,uint256)"(
      tokenToRescue: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDistributionToken(
      stakingToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDistributionToken(address)"(
      stakingToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStakingToken(
      stakingToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStakingToken(address)"(
      stakingToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeFor(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startBonus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBonus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsHistory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supportsHistory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalLocked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalLockedShares()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStaked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakedFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalStakedFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStakingShares(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalStakingShares()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUnlocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalUnlocked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockScheduleCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unlockScheduleCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockSchedules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unlockSchedules(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockTokens(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unlockTokens()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unstakeQuery(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstakeQuery(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateAccounting(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateAccounting()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
