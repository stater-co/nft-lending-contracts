/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { DelegateCalled } from "./DelegateCalled";

export class DelegateCalledFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<DelegateCalled> {
    return super.deploy(overrides || {}) as Promise<DelegateCalled>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DelegateCalled {
    return super.attach(address) as DelegateCalled;
  }
  connect(signer: Signer): DelegateCalledFactory {
    return super.connect(signer) as DelegateCalledFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DelegateCalled {
    return new Contract(address, _abi, signerOrProvider) as DelegateCalled;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "testValue",
        type: "uint256",
      },
    ],
    name: "TestEvent",
    type: "event",
  },
  {
    inputs: [],
    name: "ltv",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ok",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newLtv",
        type: "uint256",
      },
    ],
    name: "setLtv",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526005600055600260015534801561001a57600080fd5b5060c3806100296000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80636fb49d73146041578063a37e52e3146059578063d909b403146073575b600080fd5b60476079565b60408051918252519081900360200190f35b604760048036036020811015606d57600080fd5b5035607f565b60476087565b60005481565b600081905590565b6001548156fea26469706673582212206eb731ac685c32e483ef8e41b5f7d459f332f8ee04e8befabba0a16e95d2c15464736f6c634300060c0033";
