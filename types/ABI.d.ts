/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ABIInterface extends ethers.utils.Interface {
  functions: {
    "MAX_SQRT_RATIO()": FunctionFragment;
    "MIN_SQRT_RATIO()": FunctionFragment;
    "approveLoan(uint256)": FunctionFragment;
    "approveLoanWithPool(uint256,uint256)": FunctionFragment;
    "cancelLoan(uint256)": FunctionFragment;
    "createLoan(tuple)": FunctionFragment;
    "discountsHandler()": FunctionFragment;
    "editLoan(uint256,uint16,uint256)": FunctionFragment;
    "getGasCostOfGetSqrtRatioAtTick(int24)": FunctionFragment;
    "getGasCostOfGetTickAtSqrtRatio(uint160)": FunctionFragment;
    "getLoanAssetsValue(tuple)": FunctionFragment;
    "getTickAtSqrtRatio(uint160)": FunctionFragment;
    "id()": FunctionFragment;
    "iltv()": FunctionFragment;
    "interestRate()": FunctionFragment;
    "interestRateToStater()": FunctionFragment;
    "lackOfPayment(uint256)": FunctionFragment;
    "lenderFee()": FunctionFragment;
    "lendingPool()": FunctionFragment;
    "liquidationTreshold()": FunctionFragment;
    "loanControlPanels(uint256)": FunctionFragment;
    "loanFeesHandler(uint256)": FunctionFragment;
    "loanHandler()": FunctionFragment;
    "loans(uint256)": FunctionFragment;
    "ltv()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "payLoan(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGlobalRouteVariables(address[],bool[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "terminateLoan(uint256)": FunctionFragment;
    "transferItems(address,address,address[],uint256[],uint8[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTokens(address,address,address,uint256,uint256)": FunctionFragment;
    "uniswapV3NftAddress()": FunctionFragment;
    "whitelistedCurrencies(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_SQRT_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SQRT_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveLoanWithPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoan",
    values: [
      {
        currency: string;
        installmentTime: BigNumberish;
        nftTokenIdArray: BigNumberish[];
        loanAmount: BigNumberish;
        nrOfInstallments: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "discountsHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editLoan",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfGetSqrtRatioAtTick",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGasCostOfGetTickAtSqrtRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanAssetsValue",
    values: [
      {
        currency: string;
        installmentTime: BigNumberish;
        nftTokenIdArray: BigNumberish[];
        loanAmount: BigNumberish;
        nrOfInstallments: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTickAtSqrtRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(functionFragment: "iltv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateToStater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lackOfPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lenderFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationTreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loanControlPanels",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanFeesHandler",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanHandler",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "ltv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payLoan",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalRouteVariables",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "terminateLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferItems",
    values: [string, string, string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokens",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3NftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedCurrencies",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_SQRT_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_SQRT_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveLoanWithPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "discountsHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfGetSqrtRatioAtTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasCostOfGetTickAtSqrtRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanAssetsValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTickAtSqrtRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iltv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateToStater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lackOfPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lenderFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationTreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanControlPanels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanFeesHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ltv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalRouteVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "terminateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3NftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedCurrencies",
    data: BytesLike
  ): Result;

  events: {
    "EditLoan(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemsWithdrawn(address,uint256,uint8)": EventFragment;
    "LoanApproved(address,uint256,uint256)": EventFragment;
    "LoanCancelled(uint256)": EventFragment;
    "LoanPayment(uint256,uint256,uint256,uint256,uint256,uint8)": EventFragment;
    "NewLoan(address,address,uint256,address[],uint256[],uint8[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EditLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ABI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ABIInterface;

  functions: {
    MAX_SQRT_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_SQRT_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    approveLoan(
      loanId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveLoanWithPool(
      loanId: BigNumberish,
      poolId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLoan(
      loan: {
        currency: string;
        installmentTime: BigNumberish;
        nftTokenIdArray: BigNumberish[];
        loanAmount: BigNumberish;
        nrOfInstallments: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    discountsHandler(overrides?: CallOverrides): Promise<[string]>;

    editLoan(
      loanId: BigNumberish,
      nrOfInstallments: BigNumberish,
      installmentTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGasCostOfGetSqrtRatioAtTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGasCostOfGetTickAtSqrtRatio(
      sqrtPriceX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLoanAssetsValue(
      loan: {
        currency: string;
        installmentTime: BigNumberish;
        nftTokenIdArray: BigNumberish[];
        loanAmount: BigNumberish;
        nrOfInstallments: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTickAtSqrtRatio(
      sqrtPriceX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    iltv(overrides?: CallOverrides): Promise<[BigNumber]>;

    interestRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    interestRateToStater(overrides?: CallOverrides): Promise<[BigNumber]>;

    lackOfPayment(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lenderFee(overrides?: CallOverrides): Promise<[number]>;

    lendingPool(overrides?: CallOverrides): Promise<[string]>;

    liquidationTreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    loanControlPanels(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        status: number;
        poolId: BigNumber;
        defaultingLimit: number;
        installmentAmount: BigNumber;
        amountDue: BigNumber;
        paidAmount: BigNumber;
        loanHandler: string;
        promissoryHandler: string;
        discountsHandler: string;
        poolHandler: string;
      }
    >;

    loanFeesHandler(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        ltv: BigNumber;
        interestRate: BigNumber;
        interestRateToStater: BigNumber;
        lenderFee: number;
      }
    >;

    loanHandler(overrides?: CallOverrides): Promise<[string]>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        borrower: string;
        lender: string;
        currency: string;
        installmentTime: BigNumber;
        nrOfPayments: BigNumber;
        loanAmount: BigNumber;
        assetsValue: BigNumber;
        nrOfInstallments: number;
      }
    >;

    ltv(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payLoan(
      loanId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGlobalRouteVariables(
      _whitelistedCurrencies: string[],
      _status: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    terminateLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferItems(
      from: string,
      to: string,
      nftAddressArray: string[],
      nftTokenIdArray: BigNumberish[],
      nftTokenTypeArray: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTokens(
      from: string,
      to: string,
      currency: string,
      qty1: BigNumberish,
      qty2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3NftAddress(overrides?: CallOverrides): Promise<[string]>;

    whitelistedCurrencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  MAX_SQRT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_SQRT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  approveLoan(
    loanId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveLoanWithPool(
    loanId: BigNumberish,
    poolId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelLoan(
    loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLoan(
    loan: {
      currency: string;
      installmentTime: BigNumberish;
      nftTokenIdArray: BigNumberish[];
      loanAmount: BigNumberish;
      nrOfInstallments: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  discountsHandler(overrides?: CallOverrides): Promise<string>;

  editLoan(
    loanId: BigNumberish,
    nrOfInstallments: BigNumberish,
    installmentTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGasCostOfGetSqrtRatioAtTick(
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGasCostOfGetTickAtSqrtRatio(
    sqrtPriceX96: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoanAssetsValue(
    loan: {
      currency: string;
      installmentTime: BigNumberish;
      nftTokenIdArray: BigNumberish[];
      loanAmount: BigNumberish;
      nrOfInstallments: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTickAtSqrtRatio(
    sqrtPriceX96: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  iltv(overrides?: CallOverrides): Promise<BigNumber>;

  interestRate(overrides?: CallOverrides): Promise<BigNumber>;

  interestRateToStater(overrides?: CallOverrides): Promise<BigNumber>;

  lackOfPayment(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lenderFee(overrides?: CallOverrides): Promise<number>;

  lendingPool(overrides?: CallOverrides): Promise<string>;

  liquidationTreshold(overrides?: CallOverrides): Promise<BigNumber>;

  loanControlPanels(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string
    ] & {
      status: number;
      poolId: BigNumber;
      defaultingLimit: number;
      installmentAmount: BigNumber;
      amountDue: BigNumber;
      paidAmount: BigNumber;
      loanHandler: string;
      promissoryHandler: string;
      discountsHandler: string;
      poolHandler: string;
    }
  >;

  loanFeesHandler(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number] & {
      ltv: BigNumber;
      interestRate: BigNumber;
      interestRateToStater: BigNumber;
      lenderFee: number;
    }
  >;

  loanHandler(overrides?: CallOverrides): Promise<string>;

  loans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      borrower: string;
      lender: string;
      currency: string;
      installmentTime: BigNumber;
      nrOfPayments: BigNumber;
      loanAmount: BigNumber;
      assetsValue: BigNumber;
      nrOfInstallments: number;
    }
  >;

  ltv(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payLoan(
    loanId: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGlobalRouteVariables(
    _whitelistedCurrencies: string[],
    _status: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  terminateLoan(
    loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferItems(
    from: string,
    to: string,
    nftAddressArray: string[],
    nftTokenIdArray: BigNumberish[],
    nftTokenTypeArray: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTokens(
    from: string,
    to: string,
    currency: string,
    qty1: BigNumberish,
    qty2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3NftAddress(overrides?: CallOverrides): Promise<string>;

  whitelistedCurrencies(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    MAX_SQRT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SQRT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    approveLoan(loanId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    approveLoanWithPool(
      loanId: BigNumberish,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelLoan(loanId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    createLoan(
      loan: {
        currency: string;
        installmentTime: BigNumberish;
        nftTokenIdArray: BigNumberish[];
        loanAmount: BigNumberish;
        nrOfInstallments: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    discountsHandler(overrides?: CallOverrides): Promise<string>;

    editLoan(
      loanId: BigNumberish,
      nrOfInstallments: BigNumberish,
      installmentTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getGasCostOfGetSqrtRatioAtTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfGetTickAtSqrtRatio(
      sqrtPriceX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanAssetsValue(
      loan: {
        currency: string;
        installmentTime: BigNumberish;
        nftTokenIdArray: BigNumberish[];
        loanAmount: BigNumberish;
        nrOfInstallments: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTickAtSqrtRatio(
      sqrtPriceX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    iltv(overrides?: CallOverrides): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateToStater(overrides?: CallOverrides): Promise<BigNumber>;

    lackOfPayment(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lenderFee(overrides?: CallOverrides): Promise<number>;

    lendingPool(overrides?: CallOverrides): Promise<string>;

    liquidationTreshold(overrides?: CallOverrides): Promise<BigNumber>;

    loanControlPanels(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string
      ] & {
        status: number;
        poolId: BigNumber;
        defaultingLimit: number;
        installmentAmount: BigNumber;
        amountDue: BigNumber;
        paidAmount: BigNumber;
        loanHandler: string;
        promissoryHandler: string;
        discountsHandler: string;
        poolHandler: string;
      }
    >;

    loanFeesHandler(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        ltv: BigNumber;
        interestRate: BigNumber;
        interestRateToStater: BigNumber;
        lenderFee: number;
      }
    >;

    loanHandler(overrides?: CallOverrides): Promise<string>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        borrower: string;
        lender: string;
        currency: string;
        installmentTime: BigNumber;
        nrOfPayments: BigNumber;
        loanAmount: BigNumber;
        assetsValue: BigNumber;
        nrOfInstallments: number;
      }
    >;

    ltv(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    payLoan(
      loanId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGlobalRouteVariables(
      _whitelistedCurrencies: string[],
      _status: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    terminateLoan(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferItems(
      from: string,
      to: string,
      nftAddressArray: string[],
      nftTokenIdArray: BigNumberish[],
      nftTokenTypeArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokens(
      from: string,
      to: string,
      currency: string,
      qty1: BigNumberish,
      qty2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3NftAddress(overrides?: CallOverrides): Promise<string>;

    whitelistedCurrencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    EditLoan(
      currency?: string | null,
      loanId?: BigNumberish | null,
      loanAmount?: null,
      amountDue?: null,
      installmentAmount?: null,
      assetsValue?: null,
      frequencyTime?: null,
      frequencyTimeUnit?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        currency: string;
        loanId: BigNumber;
        loanAmount: BigNumber;
        amountDue: BigNumber;
        installmentAmount: BigNumber;
        assetsValue: BigNumber;
        frequencyTime: BigNumber;
        frequencyTimeUnit: BigNumber;
      }
    >;

    ItemsWithdrawn(
      requester?: string | null,
      loanId?: BigNumberish | null,
      status?: null
    ): TypedEventFilter<
      [string, BigNumber, number],
      { requester: string; loanId: BigNumber; status: number }
    >;

    LoanApproved(
      lender?: string | null,
      loanId?: BigNumberish | null,
      loanPaymentEnd?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { lender: string; loanId: BigNumber; loanPaymentEnd: BigNumber }
    >;

    LoanCancelled(
      loanId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { loanId: BigNumber }>;

    LoanPayment(
      loanId?: BigNumberish | null,
      installmentAmount?: null,
      amountPaidAsInstallmentToLender?: null,
      interestPerInstallement?: null,
      interestToStaterPerInstallement?: null,
      status?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number],
      {
        loanId: BigNumber;
        installmentAmount: BigNumber;
        amountPaidAsInstallmentToLender: BigNumber;
        interestPerInstallement: BigNumber;
        interestToStaterPerInstallement: BigNumber;
        status: number;
      }
    >;

    NewLoan(
      owner?: string | null,
      currency?: string | null,
      loanId?: BigNumberish | null,
      nftAddressArray?: null,
      nftTokenIdArray?: null,
      nftTokenTypeArray?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string[], BigNumber[], number[]],
      {
        owner: string;
        currency: string;
        loanId: BigNumber;
        nftAddressArray: string[];
        nftTokenIdArray: BigNumber[];
        nftTokenTypeArray: number[];
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    MAX_SQRT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SQRT_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    approveLoan(
      loanId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveLoanWithPool(
      loanId: BigNumberish,
      poolId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLoan(
      loan: {
        currency: string;
        installmentTime: BigNumberish;
        nftTokenIdArray: BigNumberish[];
        loanAmount: BigNumberish;
        nrOfInstallments: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    discountsHandler(overrides?: CallOverrides): Promise<BigNumber>;

    editLoan(
      loanId: BigNumberish,
      nrOfInstallments: BigNumberish,
      installmentTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGasCostOfGetSqrtRatioAtTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGasCostOfGetTickAtSqrtRatio(
      sqrtPriceX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanAssetsValue(
      loan: {
        currency: string;
        installmentTime: BigNumberish;
        nftTokenIdArray: BigNumberish[];
        loanAmount: BigNumberish;
        nrOfInstallments: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTickAtSqrtRatio(
      sqrtPriceX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    iltv(overrides?: CallOverrides): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateToStater(overrides?: CallOverrides): Promise<BigNumber>;

    lackOfPayment(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lenderFee(overrides?: CallOverrides): Promise<BigNumber>;

    lendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationTreshold(overrides?: CallOverrides): Promise<BigNumber>;

    loanControlPanels(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanFeesHandler(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanHandler(overrides?: CallOverrides): Promise<BigNumber>;

    loans(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ltv(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payLoan(
      loanId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGlobalRouteVariables(
      _whitelistedCurrencies: string[],
      _status: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    terminateLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferItems(
      from: string,
      to: string,
      nftAddressArray: string[],
      nftTokenIdArray: BigNumberish[],
      nftTokenTypeArray: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTokens(
      from: string,
      to: string,
      currency: string,
      qty1: BigNumberish,
      qty2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3NftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedCurrencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SQRT_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_SQRT_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveLoan(
      loanId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveLoanWithPool(
      loanId: BigNumberish,
      poolId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLoan(
      loan: {
        currency: string;
        installmentTime: BigNumberish;
        nftTokenIdArray: BigNumberish[];
        loanAmount: BigNumberish;
        nrOfInstallments: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    discountsHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editLoan(
      loanId: BigNumberish,
      nrOfInstallments: BigNumberish,
      installmentTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGasCostOfGetSqrtRatioAtTick(
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGasCostOfGetTickAtSqrtRatio(
      sqrtPriceX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanAssetsValue(
      loan: {
        currency: string;
        installmentTime: BigNumberish;
        nftTokenIdArray: BigNumberish[];
        loanAmount: BigNumberish;
        nrOfInstallments: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTickAtSqrtRatio(
      sqrtPriceX96: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iltv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestRateToStater(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lackOfPayment(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lenderFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationTreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanControlPanels(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanFeesHandler(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ltv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payLoan(
      loanId: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalRouteVariables(
      _whitelistedCurrencies: string[],
      _status: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    terminateLoan(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferItems(
      from: string,
      to: string,
      nftAddressArray: string[],
      nftTokenIdArray: BigNumberish[],
      nftTokenTypeArray: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTokens(
      from: string,
      to: string,
      currency: string,
      qty1: BigNumberish,
      qty2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3NftAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedCurrencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
