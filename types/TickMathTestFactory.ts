/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TickMathTest } from "./TickMathTest";

export class TickMathTestFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<TickMathTest> {
    return super.deploy(overrides || {}) as Promise<TickMathTest>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickMathTest {
    return super.attach(address) as TickMathTest;
  }
  connect(signer: Signer): TickMathTestFactory {
    return super.connect(signer) as TickMathTestFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TickMathTest {
    return new Contract(address, _abi, signerOrProvider) as TickMathTest;
  }
}

const _abi = [
  {
    inputs: [],
    name: "MAX_SQRT_RATIO",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_SQRT_RATIO",
    outputs: [
      {
        internalType: "uint160",
        name: "",
        type: "uint160",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int24",
        name: "tick",
        type: "int24",
      },
    ],
    name: "getGasCostOfGetSqrtRatioAtTick",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "getGasCostOfGetTickAtSqrtRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint160",
        name: "sqrtPriceX96",
        type: "uint160",
      },
    ],
    name: "getTickAtSqrtRatio",
    outputs: [
      {
        internalType: "int24",
        name: "",
        type: "int24",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610843806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634f76c0581461005c5780636d2cc30414610099578063a7398eb4146100bd578063b0622f67146100ef578063ee8847ff14610115575b600080fd5b6100826004803603602081101561007257600080fd5b50356001600160a01b031661011d565b6040805160029290920b8252519081900360200190f35b6100a161012e565b604080516001600160a01b039092168252519081900360200190f35b6100dd600480360360208110156100d357600080fd5b503560020b610146565b60408051918252519081900360200190f35b6100dd6004803603602081101561010557600080fd5b50356001600160a01b031661015f565b6100a161016e565b600061012882610177565b92915050565b73fffd8963efd1fc6a506488495d951d5263988d2690565b6000805a90506101558361049f565b505a900392915050565b6000805a905061015583610177565b6401000276a390565b60006401000276a36001600160a01b038316108015906101b3575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038316105b6101e8576040805162461bcd60e51b81526020600482015260016024820152602960f91b604482015290519081900360640190fd5b640100000000600160c01b03602083901b166fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c9790881196179094179092171790911717176080811061028557607f810383901c915061028f565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461049057886001600160a01b03166104748261049f565b6001600160a01b03161115610489578161048b565b805b610492565b815b9998505050505050505050565b60008060008360020b126104b357826104b8565b826000035b9050620d89e8600282900b13156104fa576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b60006001821660020b61051157600160801b610523565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690508160021660020b60001461055c576ffff97272373d413259a46990580e213a0260801c5b6004821660020b1561057e576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821660020b156105a0576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821660020b156105c2576fffcb9843d60f6159c9db58835c9266440260801c5b6020821660020b156105e4576fff973b41fa98c081472e6896dfb254c00260801c5b6040821660020b15610606576fff2ea16466c96a3843ec78b326b528610260801c5b6080821660020b15610628576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821660020b1561064b576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821660020b1561066e576ff987a7253ac413176f2b074cf7815e540260801c5b610400821660020b15610691576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821660020b156106b4576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821660020b156106d7576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821660020b156106fa576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821660020b1561071d576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821660020b15610740576f31be135f97d08fd981231505542fcfa60260801c5b62010000821660020b15610764576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821660020b15610787576e5d6af8dedb81196699c329225ee6040260801c5b62040000821660020b156107a9576d2216e584f5fa1ea926041bedfe980260801c5b62080000821660020b156107c9576b048a170391f7dc42444e8fa20260801c5b60008460020b13156107e45780600019816107e057fe5b0490505b6401000000008106156107f85760016107fb565b60005b60ff16602082901c019250505091905056fea2646970667358221220a22d62e457c745bcf042820d966b5f2a8e03cbb08d19f2755bea6c535f9d803364736f6c634300060c0033";
