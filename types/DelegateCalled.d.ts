/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DelegateCalledInterface extends ethers.utils.Interface {
  functions: {
    "ltv()": FunctionFragment;
    "ok()": FunctionFragment;
    "setLtv(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ltv", values?: undefined): string;
  encodeFunctionData(functionFragment: "ok", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setLtv",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ltv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ok", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLtv", data: BytesLike): Result;

  events: {
    "TestEvent(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TestEvent"): EventFragment;
}

export class DelegateCalled extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DelegateCalledInterface;

  functions: {
    ltv(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "ltv()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    ok(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "ok()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setLtv(
      newLtv: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLtv(uint256)"(
      newLtv: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  ltv(overrides?: CallOverrides): Promise<BigNumber>;

  "ltv()"(overrides?: CallOverrides): Promise<BigNumber>;

  ok(overrides?: CallOverrides): Promise<BigNumber>;

  "ok()"(overrides?: CallOverrides): Promise<BigNumber>;

  setLtv(
    newLtv: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLtv(uint256)"(
    newLtv: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    ltv(overrides?: CallOverrides): Promise<BigNumber>;

    "ltv()"(overrides?: CallOverrides): Promise<BigNumber>;

    ok(overrides?: CallOverrides): Promise<BigNumber>;

    "ok()"(overrides?: CallOverrides): Promise<BigNumber>;

    setLtv(newLtv: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "setLtv(uint256)"(
      newLtv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    TestEvent(testValue: null): EventFilter;
  };

  estimateGas: {
    ltv(overrides?: CallOverrides): Promise<BigNumber>;

    "ltv()"(overrides?: CallOverrides): Promise<BigNumber>;

    ok(overrides?: CallOverrides): Promise<BigNumber>;

    "ok()"(overrides?: CallOverrides): Promise<BigNumber>;

    setLtv(newLtv: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setLtv(uint256)"(
      newLtv: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ltv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ltv()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ok(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ok()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLtv(
      newLtv: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLtv(uint256)"(
      newLtv: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
