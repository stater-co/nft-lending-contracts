/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { DelegateCaller } from "./DelegateCaller";

export class DelegateCallerFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<DelegateCaller> {
    return super.deploy(overrides || {}) as Promise<DelegateCaller>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DelegateCaller {
    return super.attach(address) as DelegateCaller;
  }
  connect(signer: Signer): DelegateCallerFactory {
    return super.connect(signer) as DelegateCallerFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DelegateCaller {
    return new Contract(address, _abi, signerOrProvider) as DelegateCaller;
  }
}

const _abi = [
  {
    inputs: [],
    name: "ltv",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "setLtv",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600560005534801561001557600080fd5b5061024d806100256000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636fb49d731461003b5780637f47093a14610055575b600080fd5b610043610108565b60408051918252519081900360200190f35b6101066004803603604081101561006b57600080fd5b81019060208101813564010000000081111561008657600080fd5b82018360208201111561009857600080fd5b803590602001918460018302840111640100000000831117156100ba57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550505090356001600160a01b0316915061010e9050565b005b60005481565b6000816001600160a01b0316836040518082805190602001908083835b6020831061014a5780518252601f19909201916020918201910161012b565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101aa576040519150601f19603f3d011682016040523d82523d6000602084013e6101af565b606091505b50509050806101ef5760405162461bcd60e51b81526004018080602001828103825260238152602001806101f56023913960400191505060405180910390fd5b50505056fe537461746572476174657761793a2044656c65676174652063616c6c206661696c6564a26469706673582212205d3b9abee48547cec5dab31f023e53ad40e42b7aed959c0541600cf7ef03091b64736f6c634300060c0033";
