/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LendingTemplateInterface extends ethers.utils.Interface {
  functions: {
    "boilerplate(address,address)": FunctionFragment;
    "delegateCall(address,bytes)": FunctionFragment;
    "discountsHandler()": FunctionFragment;
    "empty()": FunctionFragment;
    "forcefullyUpdateBoilerplate(address,address,bytes4)": FunctionFragment;
    "getLoanApprovalCost(uint256)": FunctionFragment;
    "getLoanApprovalCostOnly(uint256)": FunctionFragment;
    "getLoanInstallmentCost(uint256,uint256)": FunctionFragment;
    "getLoanRemainToPay(uint256)": FunctionFragment;
    "getLoanStartEnd(uint256)": FunctionFragment;
    "id()": FunctionFragment;
    "interestRate()": FunctionFragment;
    "interestRateToStater()": FunctionFragment;
    "lenderFee()": FunctionFragment;
    "loanControlPanels(uint256)": FunctionFragment;
    "loanFeesHandler(uint256)": FunctionFragment;
    "loanHandler()": FunctionFragment;
    "loans(uint256)": FunctionFragment;
    "ltv()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGlobalVariables(tuple,tuple)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferItems(address,address,address[],uint256[],uint8[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTokens(address,address,address,uint256,uint256)": FunctionFragment;
    "updateBoilerplate(address,bytes4)": FunctionFragment;
    "vanillaCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "boilerplate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "discountsHandler",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "empty", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forcefullyUpdateBoilerplate",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanApprovalCost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanApprovalCostOnly",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanInstallmentCost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanRemainToPay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanStartEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestRateToStater",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lenderFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "loanControlPanels",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanFeesHandler",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanHandler",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "ltv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalVariables",
    values: [
      {
        ltv: BigNumberish;
        interestRate: BigNumberish;
        interestRateToStater: BigNumberish;
        lenderFee: BigNumberish;
      },
      {
        loanHandler: string;
        promissoryHandler: string;
        discountsHandler: string;
        poolHandler: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferItems",
    values: [string, string, string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokens",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBoilerplate",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vanillaCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "boilerplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountsHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "empty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forcefullyUpdateBoilerplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanApprovalCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanApprovalCostOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanInstallmentCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanRemainToPay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanStartEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestRateToStater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lenderFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loanControlPanels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanFeesHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ltv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBoilerplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vanillaCall",
    data: BytesLike
  ): Result;

  events: {
    "EditLoan(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "ItemsWithdrawn(address,uint256,uint8)": EventFragment;
    "LoanApproved(address,uint256,uint256)": EventFragment;
    "LoanCancelled(uint256)": EventFragment;
    "LoanPayment(uint256,uint256,uint256,uint256,uint256,uint8)": EventFragment;
    "NewLoan(address,address,uint256,address[],uint256[],uint8[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EditLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class LendingTemplate extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LendingTemplateInterface;

  functions: {
    boilerplate(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "boilerplate(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    delegateCall(
      to: string,
      input: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegateCall(address,bytes)"(
      to: string,
      input: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    discountsHandler(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "discountsHandler()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    empty(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "empty()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    forcefullyUpdateBoilerplate(
      onBehalfOf: string,
      to: string,
      method: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forcefullyUpdateBoilerplate(address,address,bytes4)"(
      onBehalfOf: string,
      to: string,
      method: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLoanApprovalCost(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    "getLoanApprovalCost(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    getLoanApprovalCostOnly(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getLoanApprovalCostOnly(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getLoanInstallmentCost(
      loanId: BigNumberish,
      nrOfInstallments: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      overallInstallmentAmount: BigNumber;
      interestPerInstallement: BigNumber;
      interestDiscounted: BigNumber;
      interestToStaterPerInstallement: BigNumber;
      amountPaidAsInstallmentToLender: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "getLoanInstallmentCost(uint256,uint256)"(
      loanId: BigNumberish,
      nrOfInstallments: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      overallInstallmentAmount: BigNumber;
      interestPerInstallement: BigNumber;
      interestDiscounted: BigNumber;
      interestToStaterPerInstallement: BigNumber;
      amountPaidAsInstallmentToLender: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    getLoanRemainToPay(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getLoanRemainToPay(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getLoanStartEnd(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber];
    }>;

    "getLoanStartEnd(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber];
    }>;

    id(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "id()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    interestRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "interestRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    interestRateToStater(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "interestRateToStater()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lenderFee(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "lenderFee()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    loanControlPanels(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      status: number;
      poolId: BigNumber;
      defaultingLimit: number;
      installmentAmount: BigNumber;
      amountDue: BigNumber;
      paidAmount: BigNumber;
      loanHandler: string;
      promissoryHandler: string;
      discountsHandler: string;
      poolHandler: string;
      0: number;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    "loanControlPanels(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      status: number;
      poolId: BigNumber;
      defaultingLimit: number;
      installmentAmount: BigNumber;
      amountDue: BigNumber;
      paidAmount: BigNumber;
      loanHandler: string;
      promissoryHandler: string;
      discountsHandler: string;
      poolHandler: string;
      0: number;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    loanFeesHandler(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ltv: BigNumber;
      interestRate: BigNumber;
      interestRateToStater: BigNumber;
      lenderFee: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    "loanFeesHandler(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ltv: BigNumber;
      interestRate: BigNumber;
      interestRateToStater: BigNumber;
      lenderFee: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    loanHandler(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "loanHandler()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrower: string;
      lender: string;
      currency: string;
      installmentTime: BigNumber;
      nrOfPayments: BigNumber;
      loanAmount: BigNumber;
      assetsValue: BigNumber;
      nrOfInstallments: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: number;
    }>;

    "loans(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrower: string;
      lender: string;
      currency: string;
      installmentTime: BigNumber;
      nrOfPayments: BigNumber;
      loanAmount: BigNumber;
      assetsValue: BigNumber;
      nrOfInstallments: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: number;
    }>;

    ltv(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "ltv()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setGlobalVariables(
      feesHandler: {
        ltv: BigNumberish;
        interestRate: BigNumberish;
        interestRateToStater: BigNumberish;
        lenderFee: BigNumberish;
      },
      handlers: {
        loanHandler: string;
        promissoryHandler: string;
        discountsHandler: string;
        poolHandler: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGlobalVariables((uint256,uint256,uint256,uint32),(address,address,address,address))"(
      feesHandler: {
        ltv: BigNumberish;
        interestRate: BigNumberish;
        interestRateToStater: BigNumberish;
        lenderFee: BigNumberish;
      },
      handlers: {
        loanHandler: string;
        promissoryHandler: string;
        discountsHandler: string;
        poolHandler: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    transferItems(
      from: string,
      to: string,
      nftAddressArray: string[],
      nftTokenIdArray: BigNumberish[],
      nftTokenTypeArray: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferItems(address,address,address[],uint256[],uint8[])"(
      from: string,
      to: string,
      nftAddressArray: string[],
      nftTokenIdArray: BigNumberish[],
      nftTokenTypeArray: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferTokens(
      from: string,
      to: string,
      currency: string,
      qty1: BigNumberish,
      qty2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferTokens(address,address,address,uint256,uint256)"(
      from: string,
      to: string,
      currency: string,
      qty1: BigNumberish,
      qty2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateBoilerplate(
      to: string,
      method: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateBoilerplate(address,bytes4)"(
      to: string,
      method: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vanillaCall(
      to: string,
      input: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "vanillaCall(address,bytes)"(
      to: string,
      input: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  boilerplate(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "boilerplate(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  delegateCall(
    to: string,
    input: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegateCall(address,bytes)"(
    to: string,
    input: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  discountsHandler(overrides?: CallOverrides): Promise<string>;

  "discountsHandler()"(overrides?: CallOverrides): Promise<string>;

  empty(overrides?: CallOverrides): Promise<string>;

  "empty()"(overrides?: CallOverrides): Promise<string>;

  forcefullyUpdateBoilerplate(
    onBehalfOf: string,
    to: string,
    method: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forcefullyUpdateBoilerplate(address,address,bytes4)"(
    onBehalfOf: string,
    to: string,
    method: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLoanApprovalCost(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
  }>;

  "getLoanApprovalCost(uint256)"(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: string;
  }>;

  getLoanApprovalCostOnly(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLoanApprovalCostOnly(uint256)"(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoanInstallmentCost(
    loanId: BigNumberish,
    nrOfInstallments: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    overallInstallmentAmount: BigNumber;
    interestPerInstallement: BigNumber;
    interestDiscounted: BigNumber;
    interestToStaterPerInstallement: BigNumber;
    amountPaidAsInstallmentToLender: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "getLoanInstallmentCost(uint256,uint256)"(
    loanId: BigNumberish,
    nrOfInstallments: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    overallInstallmentAmount: BigNumber;
    interestPerInstallement: BigNumber;
    interestDiscounted: BigNumber;
    interestToStaterPerInstallement: BigNumber;
    amountPaidAsInstallmentToLender: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  getLoanRemainToPay(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLoanRemainToPay(uint256)"(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLoanStartEnd(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  "getLoanStartEnd(uint256)"(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  "id()"(overrides?: CallOverrides): Promise<BigNumber>;

  interestRate(overrides?: CallOverrides): Promise<BigNumber>;

  "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  interestRateToStater(overrides?: CallOverrides): Promise<BigNumber>;

  "interestRateToStater()"(overrides?: CallOverrides): Promise<BigNumber>;

  lenderFee(overrides?: CallOverrides): Promise<number>;

  "lenderFee()"(overrides?: CallOverrides): Promise<number>;

  loanControlPanels(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    status: number;
    poolId: BigNumber;
    defaultingLimit: number;
    installmentAmount: BigNumber;
    amountDue: BigNumber;
    paidAmount: BigNumber;
    loanHandler: string;
    promissoryHandler: string;
    discountsHandler: string;
    poolHandler: string;
    0: number;
    1: BigNumber;
    2: number;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: string;
    8: string;
    9: string;
  }>;

  "loanControlPanels(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    status: number;
    poolId: BigNumber;
    defaultingLimit: number;
    installmentAmount: BigNumber;
    amountDue: BigNumber;
    paidAmount: BigNumber;
    loanHandler: string;
    promissoryHandler: string;
    discountsHandler: string;
    poolHandler: string;
    0: number;
    1: BigNumber;
    2: number;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: string;
    7: string;
    8: string;
    9: string;
  }>;

  loanFeesHandler(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    ltv: BigNumber;
    interestRate: BigNumber;
    interestRateToStater: BigNumber;
    lenderFee: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: number;
  }>;

  "loanFeesHandler(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    ltv: BigNumber;
    interestRate: BigNumber;
    interestRateToStater: BigNumber;
    lenderFee: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: number;
  }>;

  loanHandler(overrides?: CallOverrides): Promise<string>;

  "loanHandler()"(overrides?: CallOverrides): Promise<string>;

  loans(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    borrower: string;
    lender: string;
    currency: string;
    installmentTime: BigNumber;
    nrOfPayments: BigNumber;
    loanAmount: BigNumber;
    assetsValue: BigNumber;
    nrOfInstallments: number;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: number;
  }>;

  "loans(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    borrower: string;
    lender: string;
    currency: string;
    installmentTime: BigNumber;
    nrOfPayments: BigNumber;
    loanAmount: BigNumber;
    assetsValue: BigNumber;
    nrOfInstallments: number;
    0: string;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: number;
  }>;

  ltv(overrides?: CallOverrides): Promise<BigNumber>;

  "ltv()"(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setGlobalVariables(
    feesHandler: {
      ltv: BigNumberish;
      interestRate: BigNumberish;
      interestRateToStater: BigNumberish;
      lenderFee: BigNumberish;
    },
    handlers: {
      loanHandler: string;
      promissoryHandler: string;
      discountsHandler: string;
      poolHandler: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGlobalVariables((uint256,uint256,uint256,uint32),(address,address,address,address))"(
    feesHandler: {
      ltv: BigNumberish;
      interestRate: BigNumberish;
      interestRateToStater: BigNumberish;
      lenderFee: BigNumberish;
    },
    handlers: {
      loanHandler: string;
      promissoryHandler: string;
      discountsHandler: string;
      poolHandler: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferItems(
    from: string,
    to: string,
    nftAddressArray: string[],
    nftTokenIdArray: BigNumberish[],
    nftTokenTypeArray: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferItems(address,address,address[],uint256[],uint8[])"(
    from: string,
    to: string,
    nftAddressArray: string[],
    nftTokenIdArray: BigNumberish[],
    nftTokenTypeArray: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferTokens(
    from: string,
    to: string,
    currency: string,
    qty1: BigNumberish,
    qty2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferTokens(address,address,address,uint256,uint256)"(
    from: string,
    to: string,
    currency: string,
    qty1: BigNumberish,
    qty2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateBoilerplate(
    to: string,
    method: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateBoilerplate(address,bytes4)"(
    to: string,
    method: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vanillaCall(
    to: string,
    input: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "vanillaCall(address,bytes)"(
    to: string,
    input: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    boilerplate(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "boilerplate(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    delegateCall(
      to: string,
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "delegateCall(address,bytes)"(
      to: string,
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    discountsHandler(overrides?: CallOverrides): Promise<string>;

    "discountsHandler()"(overrides?: CallOverrides): Promise<string>;

    empty(overrides?: CallOverrides): Promise<string>;

    "empty()"(overrides?: CallOverrides): Promise<string>;

    forcefullyUpdateBoilerplate(
      onBehalfOf: string,
      to: string,
      method: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "forcefullyUpdateBoilerplate(address,address,bytes4)"(
      onBehalfOf: string,
      to: string,
      method: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getLoanApprovalCost(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    "getLoanApprovalCost(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
    }>;

    getLoanApprovalCostOnly(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLoanApprovalCostOnly(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanInstallmentCost(
      loanId: BigNumberish,
      nrOfInstallments: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      overallInstallmentAmount: BigNumber;
      interestPerInstallement: BigNumber;
      interestDiscounted: BigNumber;
      interestToStaterPerInstallement: BigNumber;
      amountPaidAsInstallmentToLender: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "getLoanInstallmentCost(uint256,uint256)"(
      loanId: BigNumberish,
      nrOfInstallments: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      overallInstallmentAmount: BigNumber;
      interestPerInstallement: BigNumber;
      interestDiscounted: BigNumber;
      interestToStaterPerInstallement: BigNumber;
      amountPaidAsInstallmentToLender: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    getLoanRemainToPay(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLoanRemainToPay(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanStartEnd(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "getLoanStartEnd(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    "id()"(overrides?: CallOverrides): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateToStater(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRateToStater()"(overrides?: CallOverrides): Promise<BigNumber>;

    lenderFee(overrides?: CallOverrides): Promise<number>;

    "lenderFee()"(overrides?: CallOverrides): Promise<number>;

    loanControlPanels(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      status: number;
      poolId: BigNumber;
      defaultingLimit: number;
      installmentAmount: BigNumber;
      amountDue: BigNumber;
      paidAmount: BigNumber;
      loanHandler: string;
      promissoryHandler: string;
      discountsHandler: string;
      poolHandler: string;
      0: number;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    "loanControlPanels(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      status: number;
      poolId: BigNumber;
      defaultingLimit: number;
      installmentAmount: BigNumber;
      amountDue: BigNumber;
      paidAmount: BigNumber;
      loanHandler: string;
      promissoryHandler: string;
      discountsHandler: string;
      poolHandler: string;
      0: number;
      1: BigNumber;
      2: number;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: string;
      7: string;
      8: string;
      9: string;
    }>;

    loanFeesHandler(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ltv: BigNumber;
      interestRate: BigNumber;
      interestRateToStater: BigNumber;
      lenderFee: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    "loanFeesHandler(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      ltv: BigNumber;
      interestRate: BigNumber;
      interestRateToStater: BigNumber;
      lenderFee: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    loanHandler(overrides?: CallOverrides): Promise<string>;

    "loanHandler()"(overrides?: CallOverrides): Promise<string>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrower: string;
      lender: string;
      currency: string;
      installmentTime: BigNumber;
      nrOfPayments: BigNumber;
      loanAmount: BigNumber;
      assetsValue: BigNumber;
      nrOfInstallments: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: number;
    }>;

    "loans(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      borrower: string;
      lender: string;
      currency: string;
      installmentTime: BigNumber;
      nrOfPayments: BigNumber;
      loanAmount: BigNumber;
      assetsValue: BigNumber;
      nrOfInstallments: number;
      0: string;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: number;
    }>;

    ltv(overrides?: CallOverrides): Promise<BigNumber>;

    "ltv()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setGlobalVariables(
      feesHandler: {
        ltv: BigNumberish;
        interestRate: BigNumberish;
        interestRateToStater: BigNumberish;
        lenderFee: BigNumberish;
      },
      handlers: {
        loanHandler: string;
        promissoryHandler: string;
        discountsHandler: string;
        poolHandler: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "setGlobalVariables((uint256,uint256,uint256,uint32),(address,address,address,address))"(
      feesHandler: {
        ltv: BigNumberish;
        interestRate: BigNumberish;
        interestRateToStater: BigNumberish;
        lenderFee: BigNumberish;
      },
      handlers: {
        loanHandler: string;
        promissoryHandler: string;
        discountsHandler: string;
        poolHandler: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferItems(
      from: string,
      to: string,
      nftAddressArray: string[],
      nftTokenIdArray: BigNumberish[],
      nftTokenTypeArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "transferItems(address,address,address[],uint256[],uint8[])"(
      from: string,
      to: string,
      nftAddressArray: string[],
      nftTokenIdArray: BigNumberish[],
      nftTokenTypeArray: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokens(
      from: string,
      to: string,
      currency: string,
      qty1: BigNumberish,
      qty2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferTokens(address,address,address,uint256,uint256)"(
      from: string,
      to: string,
      currency: string,
      qty1: BigNumberish,
      qty2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBoilerplate(
      to: string,
      method: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBoilerplate(address,bytes4)"(
      to: string,
      method: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vanillaCall(
      to: string,
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "vanillaCall(address,bytes)"(
      to: string,
      input: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    EditLoan(
      currency: string | null,
      loanId: BigNumberish | null,
      loanAmount: null,
      amountDue: null,
      installmentAmount: null,
      assetsValue: null,
      frequencyTime: null,
      frequencyTimeUnit: null
    ): EventFilter;

    ItemsWithdrawn(
      requester: string | null,
      loanId: BigNumberish | null,
      status: null
    ): EventFilter;

    LoanApproved(
      lender: string | null,
      loanId: BigNumberish | null,
      loanPaymentEnd: null
    ): EventFilter;

    LoanCancelled(loanId: BigNumberish | null): EventFilter;

    LoanPayment(
      loanId: BigNumberish | null,
      installmentAmount: null,
      amountPaidAsInstallmentToLender: null,
      interestPerInstallement: null,
      interestToStaterPerInstallement: null,
      status: null
    ): EventFilter;

    NewLoan(
      owner: string | null,
      currency: string | null,
      loanId: BigNumberish | null,
      nftAddressArray: null,
      nftTokenIdArray: null,
      nftTokenTypeArray: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    boilerplate(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "boilerplate(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegateCall(
      to: string,
      input: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delegateCall(address,bytes)"(
      to: string,
      input: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    discountsHandler(overrides?: CallOverrides): Promise<BigNumber>;

    "discountsHandler()"(overrides?: CallOverrides): Promise<BigNumber>;

    empty(overrides?: CallOverrides): Promise<BigNumber>;

    "empty()"(overrides?: CallOverrides): Promise<BigNumber>;

    forcefullyUpdateBoilerplate(
      onBehalfOf: string,
      to: string,
      method: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "forcefullyUpdateBoilerplate(address,address,bytes4)"(
      onBehalfOf: string,
      to: string,
      method: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getLoanApprovalCost(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLoanApprovalCost(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanApprovalCostOnly(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLoanApprovalCostOnly(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanInstallmentCost(
      loanId: BigNumberish,
      nrOfInstallments: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLoanInstallmentCost(uint256,uint256)"(
      loanId: BigNumberish,
      nrOfInstallments: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanRemainToPay(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLoanRemainToPay(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanStartEnd(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLoanStartEnd(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    "id()"(overrides?: CallOverrides): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    interestRateToStater(overrides?: CallOverrides): Promise<BigNumber>;

    "interestRateToStater()"(overrides?: CallOverrides): Promise<BigNumber>;

    lenderFee(overrides?: CallOverrides): Promise<BigNumber>;

    "lenderFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    loanControlPanels(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loanControlPanels(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanFeesHandler(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "loanFeesHandler(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loanHandler(overrides?: CallOverrides): Promise<BigNumber>;

    "loanHandler()"(overrides?: CallOverrides): Promise<BigNumber>;

    loans(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "loans(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ltv(overrides?: CallOverrides): Promise<BigNumber>;

    "ltv()"(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setGlobalVariables(
      feesHandler: {
        ltv: BigNumberish;
        interestRate: BigNumberish;
        interestRateToStater: BigNumberish;
        lenderFee: BigNumberish;
      },
      handlers: {
        loanHandler: string;
        promissoryHandler: string;
        discountsHandler: string;
        poolHandler: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGlobalVariables((uint256,uint256,uint256,uint32),(address,address,address,address))"(
      feesHandler: {
        ltv: BigNumberish;
        interestRate: BigNumberish;
        interestRateToStater: BigNumberish;
        lenderFee: BigNumberish;
      },
      handlers: {
        loanHandler: string;
        promissoryHandler: string;
        discountsHandler: string;
        poolHandler: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferItems(
      from: string,
      to: string,
      nftAddressArray: string[],
      nftTokenIdArray: BigNumberish[],
      nftTokenTypeArray: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferItems(address,address,address[],uint256[],uint8[])"(
      from: string,
      to: string,
      nftAddressArray: string[],
      nftTokenIdArray: BigNumberish[],
      nftTokenTypeArray: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferTokens(
      from: string,
      to: string,
      currency: string,
      qty1: BigNumberish,
      qty2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferTokens(address,address,address,uint256,uint256)"(
      from: string,
      to: string,
      currency: string,
      qty1: BigNumberish,
      qty2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateBoilerplate(
      to: string,
      method: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateBoilerplate(address,bytes4)"(
      to: string,
      method: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vanillaCall(
      to: string,
      input: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "vanillaCall(address,bytes)"(
      to: string,
      input: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    boilerplate(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "boilerplate(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegateCall(
      to: string,
      input: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegateCall(address,bytes)"(
      to: string,
      input: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    discountsHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "discountsHandler()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    empty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "empty()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forcefullyUpdateBoilerplate(
      onBehalfOf: string,
      to: string,
      method: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forcefullyUpdateBoilerplate(address,address,bytes4)"(
      onBehalfOf: string,
      to: string,
      method: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getLoanApprovalCost(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLoanApprovalCost(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanApprovalCostOnly(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLoanApprovalCostOnly(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanInstallmentCost(
      loanId: BigNumberish,
      nrOfInstallments: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLoanInstallmentCost(uint256,uint256)"(
      loanId: BigNumberish,
      nrOfInstallments: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanRemainToPay(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLoanRemainToPay(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanStartEnd(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLoanStartEnd(uint256)"(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "id()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "interestRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestRateToStater(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interestRateToStater()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lenderFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lenderFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanControlPanels(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanControlPanels(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanFeesHandler(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loanFeesHandler(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loanHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "loanHandler()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loans(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "loans(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ltv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ltv()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setGlobalVariables(
      feesHandler: {
        ltv: BigNumberish;
        interestRate: BigNumberish;
        interestRateToStater: BigNumberish;
        lenderFee: BigNumberish;
      },
      handlers: {
        loanHandler: string;
        promissoryHandler: string;
        discountsHandler: string;
        poolHandler: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGlobalVariables((uint256,uint256,uint256,uint32),(address,address,address,address))"(
      feesHandler: {
        ltv: BigNumberish;
        interestRate: BigNumberish;
        interestRateToStater: BigNumberish;
        lenderFee: BigNumberish;
      },
      handlers: {
        loanHandler: string;
        promissoryHandler: string;
        discountsHandler: string;
        poolHandler: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferItems(
      from: string,
      to: string,
      nftAddressArray: string[],
      nftTokenIdArray: BigNumberish[],
      nftTokenTypeArray: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferItems(address,address,address[],uint256[],uint8[])"(
      from: string,
      to: string,
      nftAddressArray: string[],
      nftTokenIdArray: BigNumberish[],
      nftTokenTypeArray: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferTokens(
      from: string,
      to: string,
      currency: string,
      qty1: BigNumberish,
      qty2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferTokens(address,address,address,uint256,uint256)"(
      from: string,
      to: string,
      currency: string,
      qty1: BigNumberish,
      qty2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateBoilerplate(
      to: string,
      method: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateBoilerplate(address,bytes4)"(
      to: string,
      method: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vanillaCall(
      to: string,
      input: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "vanillaCall(address,bytes)"(
      to: string,
      input: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
